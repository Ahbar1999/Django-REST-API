from rest_framework import serializers
from rest_api.models import BlogPost

'''
class BlogPostSerializer(serializers.Serializer):
    id = serializers.IntegerField(read_only=True)
    title = serializers.CharField(required=True, allow_blank=False, max_length=30)
    content = serializers.CharField()

    def create(self, validated_data):
        # create a blog object with supplied data 
        return BlogPost.objects.create(**validated_data)

    def update(self, instance, validated_data):
        # update fields or keep new ones if updated data not supplied
        instance.title = validated_data.get('title', instance.title)
        instance.content = validated_data.get('content', instance.content)
        return instance 
'''

# a shortcut for creating serializer classes
# instead of manually defining the fields of the blog post class again we can just kind of 'import' and use them under ModelSerializer class
class BlogPostSerializer(serializers.ModelSerializer):
    class Meta:
        # specify our model that we want to create a serializer from
        model = BlogPost
        fields = ['id', 'title', 'content']
        # thats all
        # simple create and update methods are generated by default
